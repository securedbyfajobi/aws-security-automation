# GitLab CI/CD Pipeline for AWS Security Automation

stages:
  - security
  - test
  - build
  - deploy
  - cleanup

variables:
  AWS_DEFAULT_REGION: "eu-west-2"
  PYTHON_VERSION: "3.11"
  DOCKER_REGISTRY: "$CI_REGISTRY"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/aws-security-automation"

# Template for Python jobs
.python-template: &python-template
  image: python:$PYTHON_VERSION-slim
  before_script:
    - apt-get update && apt-get install -y git curl
    - pip install --upgrade pip
    - pip install -r requirements.txt

# Security scanning stage
sast:
  stage: security
  <<: *python-template
  script:
    - pip install bandit safety semgrep
    - bandit -r . -f json -o bandit-report.json
    - safety check --json --output safety-report.json
    - semgrep --config=auto --json --output=semgrep-report.json .
  artifacts:
    reports:
      sast: semgrep-report.json
    paths:
      - bandit-report.json
      - safety-report.json
      - semgrep-report.json
    expire_in: 1 week
  allow_failure: true

secret-detection:
  stage: security
  image: trufflesecurity/trufflehog:latest
  script:
    - trufflehog git file://. --json > secret-scan-report.json
  artifacts:
    paths:
      - secret-scan-report.json
    expire_in: 1 week
  allow_failure: true

# Code quality checks
code-quality:
  stage: security
  <<: *python-template
  script:
    - pip install black flake8 pylint mypy
    - black --check --diff .
    - flake8 --max-line-length=88 --extend-ignore=E203,W503 .
    - pylint --rcfile=.pylintrc **/*.py || echo "Pylint completed with warnings"
    - mypy --config-file mypy.ini . || echo "MyPy completed with warnings"
  allow_failure: true

# Unit tests
test:unit:
  stage: test
  <<: *python-template
  script:
    - pip install pytest pytest-cov pytest-mock
    - pytest tests/ --cov=. --cov-report=xml --cov-report=html --junitxml=test-report.xml
  artifacts:
    reports:
      junit: test-report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/
    expire_in: 1 week
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

# Integration tests
test:integration:
  stage: test
  <<: *python-template
  services:
    - redis:7.2-alpine
    - postgres:15-alpine
  variables:
    POSTGRES_DB: test_security_automation
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    REDIS_URL: redis://redis:6379/0
  script:
    - pip install pytest pytest-integration
    - pytest tests/integration/ -v
  allow_failure: true

# Infrastructure validation
terraform:validate:
  stage: test
  image: hashicorp/terraform:1.9.0
  script:
    - cd terraform/
    - terraform fmt -check -recursive .
    - terraform init -backend=false
    - terraform validate
    - terraform plan -out=tfplan
  artifacts:
    paths:
      - terraform/tfplan
    expire_in: 1 day

terraform:security:
  stage: test
  image: python:$PYTHON_VERSION-slim
  script:
    - pip install checkov
    - checkov -d terraform/ --framework terraform --output json --output-file terraform-security-report.json
  artifacts:
    paths:
      - terraform-security-report.json
    expire_in: 1 week
  allow_failure: true

# Docker build
build:docker:
  stage: build
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA .
    - docker build -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  only:
    - main
    - develop

# Security scan Docker image
container:security:
  stage: build
  image: aquasecurity/trivy:latest
  script:
    - trivy image --format json --output container-security-report.json $IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    paths:
      - container-security-report.json
    expire_in: 1 week
  dependencies:
    - build:docker
  allow_failure: true
  only:
    - main
    - develop

# Deploy to staging
deploy:staging:
  stage: deploy
  image: amazon/aws-cli:latest
  before_script:
    - yum update -y && yum install -y jq
  script:
    - aws configure set region $AWS_DEFAULT_REGION
    - aws ecs update-service --cluster security-automation-staging --service aws-security-automation --force-new-deployment
    - ./scripts/wait-for-deployment.sh staging
    - ./scripts/health-check.sh staging
  environment:
    name: staging
    url: https://staging.security.company.com
  dependencies:
    - build:docker
  only:
    - develop

# Deploy to production
deploy:production:
  stage: deploy
  image: amazon/aws-cli:latest
  before_script:
    - yum update -y && yum install -y jq unzip
    - curl -fsSL https://releases.hashicorp.com/terraform/1.9.0/terraform_1.9.0_linux_amd64.zip -o terraform.zip
    - unzip terraform.zip && mv terraform /usr/local/bin/
  script:
    - aws configure set region $AWS_DEFAULT_REGION
    # Apply infrastructure changes
    - cd terraform/
    - terraform init
    - terraform plan -out=tfplan
    - terraform apply -auto-approve tfplan
    - cd ..
    # Deploy application
    - aws ecs update-service --cluster security-automation-prod --service aws-security-automation --force-new-deployment
    - ./scripts/wait-for-deployment.sh production
    - ./scripts/health-check.sh production
  environment:
    name: production
    url: https://security.company.com
  dependencies:
    - build:docker
    - terraform:validate
  when: manual
  only:
    - main

# Performance tests
test:performance:
  stage: deploy
  image: python:$PYTHON_VERSION-slim
  script:
    - pip install locust
    - locust -f tests/performance/locustfile.py --headless --users 10 --spawn-rate 2 --run-time 60s --host https://staging.security.company.com
  artifacts:
    paths:
      - locust-report.html
    expire_in: 1 week
  dependencies:
    - deploy:staging
  allow_failure: true
  only:
    - develop

# Cleanup old images
cleanup:docker:
  stage: cleanup
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - |
      # Delete old container images (keep last 5)
      IMAGES=$(curl -s -H "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories" | \
        jq -r '.[].id')

      for image_id in $IMAGES; do
        TAGS=$(curl -s -H "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
          "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$image_id/tags" | \
          jq -r 'sort_by(.created_at) | reverse | .[5:] | .[].name')

        for tag in $TAGS; do
          curl -X DELETE -H "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
            "$CI_API_V4_URL/projects/$CI_PROJECT_ID/registry/repositories/$image_id/tags/$tag"
        done
      done
  when: always
  only:
    - main
    - develop

# Notification on failure
notify:failure:
  stage: cleanup
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"ðŸš¨ Security Automation Pipeline Failed!\nProject: '"$CI_PROJECT_NAME"'\nBranch: '"$CI_COMMIT_REF_NAME"'\nCommit: '"$CI_COMMIT_SHORT_SHA"'\nPipeline: '"$CI_PIPELINE_URL"'"}' \
        $SLACK_WEBHOOK_URL
  when: on_failure
  only:
    - main
    - develop