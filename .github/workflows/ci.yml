name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: eu-west-2
  PYTHON_VERSION: "3.11"

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt

      - name: Run Bandit security scan
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium

      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run Semgrep SAST scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep-report.json

  # Code Quality and Linting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install black flake8 pylint mypy
          pip install -r requirements.txt

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run Flake8 linting
        run: flake8 --max-line-length=88 --extend-ignore=E203,W503 .

      - name: Run Pylint
        run: pylint --rcfile=.pylintrc **/*.py || true

      - name: Run MyPy type checking
        run: mypy --config-file mypy.ini . || true

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          pip install -r requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=html
        env:
          AWS_DEFAULT_REGION: eu-west-2

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Infrastructure Tests
  infrastructure-test:
    name: Infrastructure Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: Terraform Init
        run: |
          cd terraform/
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform/
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform/
          terraform plan -out=tfplan
        env:
          AWS_DEFAULT_REGION: eu-west-2

      - name: Run Checkov security scan on Terraform
        run: |
          pip install checkov
          checkov -d terraform/ --framework terraform

  # Docker Build and Push
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, infrastructure-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            securedbyfajobi/aws-security-automation:latest
            securedbyfajobi/aws-security-automation:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Deploy to ECS Staging
        run: |
          aws ecs update-service --cluster security-automation-staging \
            --service aws-security-automation \
            --force-new-deployment

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.0

      - name: Terraform Apply
        run: |
          cd terraform/
          terraform init
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan
        env:
          TF_VAR_environment: production

      - name: Deploy to ECS Production
        run: |
          aws ecs update-service --cluster security-automation-prod \
            --service aws-security-automation \
            --force-new-deployment

      - name: Run post-deployment tests
        run: |
          python scripts/health_check.py --environment production