version: '3.8'

services:
  # Main Security Automation Service
  security-automation:
    build: .
    container_name: aws-security-automation
    restart: unless-stopped
    environment:
      - AWS_REGION=${AWS_REGION:-eu-west-2}
      - AWS_PROFILE=${AWS_PROFILE:-default}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    env_file:
      - .env
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ~/.aws:/home/security/.aws:ro
    networks:
      - security-net
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "python", "-c", "import boto3; print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and job queuing
  redis:
    image: redis:7.2-alpine
    container_name: security-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - security-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # PostgreSQL for storing findings and metadata
  postgres:
    image: postgres:15-alpine
    container_name: security-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-security_automation}
      - POSTGRES_USER=${DB_USER:-security_admin}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - security-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-security_admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: security-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-aws-cloudwatch-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - security-net
    depends_on:
      - postgres

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: security-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - security-net

  # Nginx for reverse proxy
  nginx:
    image: nginx:alpine
    container_name: security-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - security-net
    depends_on:
      - grafana
      - security-automation

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  security-net:
    driver: bridge